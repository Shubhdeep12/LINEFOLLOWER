
LINEFOLLOWER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000102  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000156  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  00000176  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000198  00000000  00000000  00000191  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000ef  00000000  00000000  00000329  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001bf  00000000  00000000  00000418  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  000005d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000b6  00000000  00000000  000005f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000090  00000000  00000000  000006ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000000d8  00000000  00000000  0000073e  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e0       	ldi	r30, 0x02	; 2
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 7f 00 	jmp	0xfe	; 0xfe <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <main>:
#define F_APU 8000000UL
#include<avr/io.h>
#include<util/delay.h>

void main()
{
  92:	1f 93       	push	r17
DDRC=0B11111111;
  94:	8f ef       	ldi	r24, 0xFF	; 255
  96:	84 bb       	out	0x14, r24	; 20
DDRA=0B11111000;
  98:	88 ef       	ldi	r24, 0xF8	; 248
  9a:	8a bb       	out	0x1a, r24	; 26
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9c:	84 ec       	ldi	r24, 0xC4	; 196
  9e:	99 e0       	ldi	r25, 0x09	; 9
  a0:	01 97       	sbiw	r24, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <main+0xe>
{


if(PINA==0B00000010)
{
PORTC=0B00000101;
  a4:	15 e0       	ldi	r17, 0x05	; 5
  a6:	6c e5       	ldi	r22, 0x5C	; 92
  a8:	74 e4       	ldi	r23, 0x44	; 68
PORTC=0B00000110;
_delay_ms(100);
}
else if(PINA==0B00000110)
{
PORTC=0B00001001;
  aa:	49 e1       	ldi	r20, 0x19	; 25
  ac:	50 e0       	ldi	r21, 0x00	; 0
  ae:	28 ea       	ldi	r18, 0xA8	; 168
  b0:	31 e6       	ldi	r19, 0x61	; 97
  b2:	b9 e0       	ldi	r27, 0x09	; 9
_delay_ms(70);

}
else if(PINA==0B00000011)
{
PORTC=0B00000110;
  b4:	a6 e0       	ldi	r26, 0x06	; 6
_delay_ms(10);
while(1)
{


if(PINA==0B00000010)
  b6:	89 b3       	in	r24, 0x19	; 25
  b8:	82 30       	cpi	r24, 0x02	; 2
  ba:	19 f4       	brne	.+6      	; 0xc2 <main+0x30>
{
PORTC=0B00000101;
  bc:	15 bb       	out	0x15, r17	; 21
  be:	cb 01       	movw	r24, r22
  c0:	0f c0       	rjmp	.+30     	; 0xe0 <main+0x4e>
_delay_ms(70);

}
else if(PINA==0B00000011)
  c2:	89 b3       	in	r24, 0x19	; 25
  c4:	83 30       	cpi	r24, 0x03	; 3
  c6:	11 f4       	brne	.+4      	; 0xcc <main+0x3a>
{
PORTC=0B00000110;
  c8:	a5 bb       	out	0x15, r26	; 21
  ca:	09 c0       	rjmp	.+18     	; 0xde <main+0x4c>
_delay_ms(100);
}
else if(PINA==0B00000110)
  cc:	89 b3       	in	r24, 0x19	; 25
  ce:	86 30       	cpi	r24, 0x06	; 6
  d0:	11 f4       	brne	.+4      	; 0xd6 <main+0x44>
{
PORTC=0B00001001;
  d2:	b5 bb       	out	0x15, r27	; 21
  d4:	04 c0       	rjmp	.+8      	; 0xde <main+0x4c>
_delay_ms(100);
}

else if(PINA==0B00000000)
  d6:	89 b3       	in	r24, 0x19	; 25
  d8:	88 23       	and	r24, r24
  da:	29 f4       	brne	.+10     	; 0xe6 <main+0x54>
{
PORTC=0B00000000;
  dc:	15 ba       	out	0x15, r1	; 21
  de:	c9 01       	movw	r24, r18
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <main+0x4e>
  e4:	e8 cf       	rjmp	.-48     	; 0xb6 <main+0x24>
_delay_ms(100);
}
else if(PINA==0B00000111)
  e6:	89 b3       	in	r24, 0x19	; 25
  e8:	87 30       	cpi	r24, 0x07	; 7
  ea:	29 f7       	brne	.-54     	; 0xb6 <main+0x24>
{
PORTC=0B00000000;
  ec:	15 ba       	out	0x15, r1	; 21
  ee:	80 e1       	ldi	r24, 0x10	; 16
  f0:	97 e2       	ldi	r25, 0x27	; 39
  f2:	fa 01       	movw	r30, r20
  f4:	31 97       	sbiw	r30, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <main+0x62>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  f8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  fa:	d9 f7       	brne	.-10     	; 0xf2 <main+0x60>
  fc:	dc cf       	rjmp	.-72     	; 0xb6 <main+0x24>

000000fe <_exit>:
  fe:	f8 94       	cli

00000100 <__stop_program>:
 100:	ff cf       	rjmp	.-2      	; 0x100 <__stop_program>
